	CHIP	65C02

	INCLUDE	"C:\NUVOTON\NSPPLAYLISTEDITOR\V1.13.000\NSP_SDS\SDS_NSP\INCLUDE\PGM_HEAD.INI.APP"

	INCLUDE	"D:\11101465\03_NUVOTON\00_DATASHEET\#9_AUDIO ENHANCEMENT\NSP\SAMPLE CODE\NSP PLAYLIST PROJECT\RINGRING\DEMOKIT\RESOURCEBIN.INI.APP"
	EXTERN 		_@SIL_EQU

	EXTERN		RESERVE1_ISR
	EXTERN		RESERVE2_ISR
	PUBLIC		INIT
	PUBLIC		PREPARE_FOR_CAP_SLEEP_SETTING

.ifdef	FW_PWM_TIMER_FXF10
	EXTERN		FW_PWM_TIMER_DOWNCOUNT
	PUBLIC		FW_TIMER_DWONCOUNT_RET
.endif
.ifdef	FW_PWM_TIMER_TMA
	EXTERN		FW_PWM_TIMER_DOWNCOUNT
	PUBLIC		FW_TIMER_DWONCOUNT_RET
.endif
.ifdef	FW_PWM_TIMER_TMG
	EXTERN		FW_PWM_TIMER_DOWNCOUNT
	PUBLIC		FW_TIMER_DWONCOUNT_RET
.endif

;==========================================================================
; Initial For Main.asm Macro
LDA_DP_ILI MACRO VAR_ADDR
	LDA (<VAR_ADDR)
	ENDM

INC_ADDR_DP	MACRO VAR_ADDR
	INC <VAR_ADDR
	BNE INC_ADDR_END_#
	INC <VAR_ADDR+1
INC_ADDR_END_#:
	ENDM

INIT_PA	MACRO
;BP06/BP16 ouput 0
.IFDEF EXT_PA
	LDA #PA_OUT_PORT_BIT
	TSB !PA_OUT_PORT_M
	TRB !PA_OUT_PORT_D
	TRB !PA_OUT_PORT		
.ENDIF		
	ENDM

OPEN_PA	MACRO
;BP06/BP16 ouput 1
.IFDEF EXT_PA
	LDA #PA_OUT_PORT_BIT
	TSB !PA_OUT_PORT		
.ENDIF		
	ENDM

CLOSE_PA MACRO
;BP06/BP16 ouput 0
.IFDEF EXT_PA
	LDA #PA_OUT_PORT_BIT
	TRB !PA_OUT_PORT
.ENDIF
	ENDM

;-------------------------------------------
WAIT_HWENG_OFF MACRO
WAIT_HWENG_OFF_LOOP#:   
	LDA #WDTC_CLR
	STA !WDTC
	LDA !HWENG
	BNE WAIT_HWENG_OFF_LOOP#
	ENDM
;--------------------------------------------------------------------------
;--------------------------------------------------------------------------
;N589D080,N589D170,N589D340:BP00/01/02/06(PA)/07,BP13
;N589D081,N589D171,N589D341,N589D481:BP00/01/02,BP15/16(PA)/17
;N589B480N,N589D650N,N589D960N:BP00/01,BP12/13/17(PA),BP20
;--------------------------------------------------------------------------
;--------------------------------------------------------------------------
BIT0		EQU 00000001B
BIT1		EQU 00000010B
BIT2		EQU 00000100B
BIT3		EQU 00001000B
BIT4		EQU 00010000B
BIT5		EQU 00100000B
BIT6		EQU 01000000B
BIT7		EQU 10000000B
;--------------------------------------------------------------------------
FXF15_FLAG	EQU BIT0
DIR0_FLAG   	EQU BIT1
DIR1_FLAG   	EQU BIT2
DIR2_FLAG   	EQU BIT3
DIRX_FLAG   	EQU (BIT1+BIT2+BIT3)   
PORT_FLAG   	EQU BIT5
SIL_DOING	EQU BIT6
SP_DOING	EQU BIT7
;--------------------------------------------------------------------------
;PRE_DEBOUNCE	EQU	10
;T_DBCTG			EQU	13
.IF(PACKAGE_FORM = 'SOP8')
TGP0_NUM     	EQU 2
TGP0_DEF     	EQU (BIT0+BIT1)
TGP1_NUM     	EQU 0
TGP1_DEF     	EQU 0
TGP2_NUM     	EQU 0
TGP2_DEF     	EQU 0
DPD_RAM_SIZE	EQU 15	
.ENDIF

.IF(PACKAGE_FORM = 'SOP14')
.IF (PARTNO='N589D080').OR.(PARTNO='N589D170').OR.(PARTNO='N589D340')
.IFNDEF EXT_PA
TGP0_NUM     	EQU 5
TGP0_DEF     	EQU (BIT0+BIT1+BIT2+BIT6+BIT7)
.ELSE
TGP0_NUM     	EQU 4
TGP0_DEF     	EQU (BIT0+BIT1+BIT2+BIT7)
.ENDIF
TGP1_NUM     	EQU 1
TGP1_DEF     	EQU BIT3
TGP2_NUM     	EQU 0
TGP2_DEF     	EQU 0
DPD_RAM_SIZE	EQU 16
.ENDIF

.IF (PARTNO='N589D081').OR.(PARTNO='N589D171').OR.(PARTNO='N589D341').OR.(PARTNO='N589D481')
TGP0_NUM     	EQU 3
TGP0_DEF     	EQU (BIT0+BIT1+BIT2)
.IFNDEF EXT_PA
TGP1_NUM     	EQU 3
TGP1_DEF     	EQU (BIT5+BIT6+BIT7)
.ELSE
TGP1_NUM     	EQU 2
TGP1_DEF     	EQU (BIT5+BIT7)
.ENDIF
TGP2_NUM     	EQU 0
TGP2_DEF     	EQU 0
DPD_RAM_SIZE	EQU 16	 
.ENDIF

.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
TGP0_NUM     	EQU 2
TGP0_DEF     	EQU (BIT0+BIT1)
.IFNDEF EXT_PA
TGP1_NUM     	EQU 3
TGP1_DEF     	EQU (BIT2+BIT3+BIT7)
.ELSE
TGP1_NUM     	EQU 2
TGP1_DEF     	EQU (BIT2+BIT3)
.ENDIF
TGP2_NUM     	EQU 1
TGP2_DEF     	EQU BIT0
DPD_RAM_SIZE	EQU 17	
.ENDIF
.ENDIF

.IFDEF EXT_PA
.IF (PARTNO='N589D080').OR.(PARTNO='N589D170').OR.(PARTNO='N589D340')
PA_OUT_PORT		EQU		BP0R
PA_OUT_PORT_D		EQU		BP0D
PA_OUT_PORT_M		EQU		BP0M
PA_OUT_PORT_BIT		EQU		BIT6
.ENDIF
.IF (PARTNO='N589D081').OR.(PARTNO='N589D171').OR.(PARTNO='N589D341').OR.(PARTNO='N589D481')
PA_OUT_PORT		EQU		BP1R
PA_OUT_PORT_D		EQU		BP1D
PA_OUT_PORT_M		EQU		BP1M
PA_OUT_PORT_BIT		EQU		BIT6
.ENDIF
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
PA_OUT_PORT		EQU		BP1R
PA_OUT_PORT_D		EQU		BP1D
PA_OUT_PORT_M		EQU		BP1M
PA_OUT_PORT_BIT		EQU		BIT7
.ENDIF
.ENDIF

;==========================================================================
;	DECLARE VARIABLES INSIDE THIS SECTION
;	EXAMPLE => 	VAR1	DS	3
;		   		VAR2	DS	1
;==========================================================================
	USER_RAM: SECTION  
;-----------------------
; User's RAM for Program
;-----------------------
NUSP_FLAG   DS 1
;	bit7		bit6		bit5		bit4		bit3	      	bit2	        bit1	       bit0
;	SP_DOING 	SIL_DOING	PORT_FLAG	Reserved	DIR2_FLAG   	DIR1_FLAG  	DIR0_FLAG      FXF15_FLAG
TG_CLM0     DS 1 
.IF(PACKAGE_FORM = 'SOP14')
TG_CLM1     DS 1 
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
TG_CLM2     DS 1 
.ENDIF
.ENDIF

EQU_ADDR		DS 4
EQU_INDEX		DS 1
SIL_COUNT   		DS 1
REPEAT_COUNT		DS 1
LIST_ADDR_REPEAT 	DS 3
LIST_EQU_COUNT		DS 1

TG_CUR		DS 1
TG_PREV		DS 1

TGF_EN0     DS 1 
.IF(PACKAGE_FORM = 'SOP14')
TGF_EN1     DS 1
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
TGF_EN2     DS 1 
.ENDIF
.ENDIF
TG_NUM		DS 1

COUNT_ON    DS 1
WHICH_TG    DS 1 

LIST_ADDR_TG 		DS 3
REPEAT_COUNT_TG		DS 1
	ENDS

	USER_DPD_RAM: SECTION
;-----------------------
; User's DPD RAM for Program
;-----------------------
NUSP_FLAG_BAK   DS 1

TG_CLM0_BAK     DS 1 
.IF(PACKAGE_FORM = 'SOP14')
TG_CLM1_BAK     DS 1 
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
TG_CLM2_BAK     DS 1 
.ENDIF
.ENDIF

EQU_ADDR_BAK	DS 4
EQU_INDEX_BAK	DS 1
SIL_COUNT_BAK   DS 1
REPEAT_COUNT_BAK	DS 1
LIST_ADDR_REPEAT_BAK 	DS 3
LIST_EQU_COUNT_BAK	DS 1

TG_CUR_BAK		DS 1
TG_PREV_BAK		DS 1
	ENDS

.IF	(WITH_RAM_OVER_STACK .EQ. 1)
	USER_RAM_AFTER_RESERVED: SECTION

	ENDS
.ENDIF

;==========================================================================
;	WRITE PROGRAM CODES & TABLES INSIDE THIS SECTION
;==========================================================================
	CODE: SECTION

;==========================================================================
; INTERRUPT SERVICE ROUTINES
;==========================================================================
;===============================================================
;  SR_NAME: PORT_ISR
;===============================================================
PORT_ISR:
	PHA
	LDA #INT0_PORT
	STA !EVF0
;User can insert program from here

	LDA #(PORT_FLAG+DIRX_FLAG)
	BIT <NUSP_FLAG
	BNE PORT_ISR_NEXT
	LDA #PORT_FLAG
	TSB <NUSP_FLAG
	LDA #PRE_DEBOUNCE
	STA <COUNT_ON	

PORT_ISR_NEXT:
	LDA #INT0_FXF15
	BIT !IEF0
    BNE _xTO_INT_EXIT           			
    STA !EVF0                               		
    TSB !IEF0	
_xTO_INT_EXIT:
	PLA
	RTI

;===============================================================
;  SR_NAME: FXF10_ISR
;===============================================================
FXF10_ISR:
	PHA
	LDA #INT0_FXF10
	STA !EVF0							;CLEAR EVF OF FXF10
;User can insert program from here

.IFDEF	FW_PWM_TIMER_FXF10
	JMP FW_PWM_TIMER_DOWNCOUNT
FW_TIMER_DWONCOUNT_RET:
.ENDIF

	PLA
	RTI

;===============================================================
;  SR_NAME: FXF13_ISR
;===============================================================
FXF13_ISR:
	PHA
	LDA #INT0_FXF13
	STA !EVF0     						;CLEAR EVF OF FXF13
;User can insert program from here

	PLA
	RTI

;===============================================================
;  SR_NAME: FXF15_ISR
;===============================================================
FXF15_ISR:
	PHA
	LDA #INT0_FXF15
	STA !EVF0							;CLEAR EVF OF FXF15
;User can insert program from here

	LDA #WDTC_CLR
	STA !WDTC

	LDA #FXF15_FLAG
	TSB <NUSP_FLAG

	PLA
	RTI	

;===============================================================
;  SR_NAME: TIMERA_ISR
;===============================================================
TMA_ISR:
	PHA
	LDA #INT0_TMA
	STA !EVF0							;CLEAR EVF OF TIMERA
;User can insert program from here

.IFDEF	FW_PWM_TIMER_TMA
	JMP FW_PWM_TIMER_DOWNCOUNT
FW_TIMER_DWONCOUNT_RET:
.ENDIF

	PLA
	RTI

;===============================================================
;  SR_NAME: TIMERG_ISR
;===============================================================
TMG_ISR:
	PHA
	LDA #INT0_TMG
	STA !EVF0							;CLEAR EVF OF TIMERG
;User can insert program from here

	.IF(WITH_FW_CAP_SENSOR_KEYS .GT. 0)
	CAP_TMG_OVER
	.ENDIF

.IFDEF	FW_PWM_TIMER_TMG
	JMP FW_PWM_TIMER_DOWNCOUNT
FW_TIMER_DWONCOUNT_RET:
.ENDIF

	PLA
	RTI

;===============================================================
;  SR_NAME: LRCT_ISR			
;===============================================================
LRCT_ISR:
	PHA
	LDA #INT1_LRCT
	STA !EVF1							;CLEAR EVF OF LRCT
;User can insert program from here

	PLA
	RTI

;===============================================================
;  SR_NAME: ADC_ISR			
;===============================================================
ADC_ISR:
	PHA
	LDA #INT1_ADC
	STA !EVF1							;CLEAR EVF OF ADC
;User can insert program from here

	PLA
	RTI

;===============================================
; I/O setting before entering CAP sleep
;===============================================
PREPARE_FOR_CAP_SLEEP_SETTING:
;-----------------------
; User's Program before Entering CAP SLEEP
;-----------------------


	RTS

;===============================================
; Main program start here after resetting
;===============================================
MAIN_START:
	SET_STACK_POINTER_TO STACK_END			;USER CAN CHANGE THE VALUE
	SYSTEM_INIT_PROCEDURE					;SYSTEM INITIALIZATION PROCEDURE
	IO_INIT_PROCEDURE						;IO INITIALIZATION PROCEDURE
	.IF(WITH_FW_CAP_SENSOR_KEYS .GT. 0)
	.IF(TOUCH_WAKEUP_EN .EQ. 1)
	PREPARE_FOR_CAP_SLEEP
	CAP_WAKEUP_CHECK
   	.ENDIF
   	.ENDIF
INIT:
	CLEAR_RAM
	.IF(WITH_FW_CAP_SENSOR_KEYS .GT. 0)
	.IF(TOUCH_WAKEUP_EN .EQ. 1)
	CAP_SENSOR_INIT_FROM_WAKEUP
   	.ENDIF
   	.ENDIF
;CLI
	SPECIAL_REGISTERS_INIT

	LDA #WDTC_CLR
	STA !WDTC

	LDA !WAKEF
	BIT #20H     			;check POR
	BNE MAIN_START_INIT

	LDA !WAKEF
	BIT #80H
	BEQ MAIN_START_INIT
	BIT #08H
	BNE MAIN_START_INIT	;reset
	JMP WAKE_UP_FROM_SLEEP

MAIN_START_INIT:
	LDA #FFH
	STA <TG_PREV
	STA <TG_CUR

	INIT_PA
.IF (PARTNO='N589D080').OR.(PARTNO='N589D170').OR.(PARTNO='N589D340')
.IFDEF EXT_PA
	LDA #87H
.ELSE
	LDA #C7H
.ENDIF
	TSB !BP0M
	TSB !BP0D
	LDA #08H
	TSB !BP1M
	TSB !BP1D
.ENDIF
.IF (PARTNO='N589D081').OR.(PARTNO='N589D171').OR.(PARTNO='N589D341').OR.(PARTNO='N589D481')
	LDA #07H
	TSB !BP0M
	TSB !BP0D
.IFDEF EXT_PA
	LDA #A0H
.ELSE
	LDA #E0H
.ENDIF
	TSB !BP1M
	TSB !BP1D	
.ENDIF
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	LDA #03H
	TSB !BP0M
	TSB !BP0D
.IFDEF EXT_PA
	LDA #0CH
.ELSE
	LDA #8CH
.ENDIF	
	TSB !BP1M
	TSB !BP1D	
	LDA #01H
	TSB !BP2M
	TSB !BP2D	
.ENDIF

	LDA #TGP0_DEF
	TSB !BP0R
	TSB !BP0EN
	LDA !BP0R
	AND #TGP0_DEF
	STA <TG_CLM0
	LDA #TGP0_DEF
	STA <TGF_EN0

.IF(PACKAGE_FORM = 'SOP14')	
	LDA #TGP1_DEF
	TSB !BP1R
	TSB !BP1EN
	LDA !BP1R
	AND #TGP1_DEF
	STA <TG_CLM1
	LDA #TGP1_DEF
	STA <TGF_EN1

.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	LDA #TGP2_DEF
	TSB !BP2R
	TSB !BP2EN
	LDA !BP2R
	AND #TGP2_DEF
	STA <TG_CLM2
	LDA #TGP2_DEF
	STA <TGF_EN2
.ENDIF
.ENDIF

	LDA #(INT0_PORT+INT0_FXF15)
	STA !EVF0
	TSB !IEF0

	STZ !WAKEF
	CLI

;play POR
	LDX #04H
	JSR GET_LIST_PROCESS
	BEQ MAIN_START_END
	JSR SET_LIST_PROCESS
	JSR NSP_PLAY_PROCESS

MAIN_START_END:
	JMP MAIN_LOOP
;-----------------------------------------------------
; init port 
;-----------------------------------------------------
WAKE_UP_FROM_SLEEP:
	INIT_PA
.IF (PARTNO='N589D080').OR.(PARTNO='N589D170').OR.(PARTNO='N589D340')
.IFDEF EXT_PA
	LDA #87H
.ELSE
	LDA #C7H
.ENDIF
	TSB !BP0M
	TSB !BP0D
	LDA #08H
	TSB !BP1M
	TSB !BP1D
.ENDIF
.IF (PARTNO='N589D081').OR.(PARTNO='N589D171').OR.(PARTNO='N589D341').OR.(PARTNO='N589D481')
	LDA #07H
	TSB !BP0M
	TSB !BP0D
.IFDEF EXT_PA
	LDA #A0H
.ELSE
	LDA #E0H
.ENDIF
	TSB !BP1M
	TSB !BP1D	
.ENDIF
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	LDA #03H
	TSB !BP0M
	TSB !BP0D	
.IFDEF EXT_PA
	LDA #0CH
.ELSE
	LDA #8CH
.ENDIF
	TSB !BP1M
	TSB !BP1D	
	LDA #01H
	TSB !BP2M
	TSB !BP2D	
.ENDIF
	LDA #TGP0_DEF
	STA <TGF_EN0
	TSB !BP0EN

.IF(PACKAGE_FORM = 'SOP14')
	LDA #TGP1_DEF
	STA <TGF_EN1
	TSB !BP1EN

.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	LDA #TGP2_DEF
	STA <TGF_EN2
	TSB !BP2EN
.ENDIF
.ENDIF	

	LDA #TGP0_NUM+TGP1_NUM+TGP2_NUM				;(<TEMP_REG1)
	STA <TG_NUM

	JSR RESTORE_LIB_DPD_RAM

	LDA !WAKEF
	BIT #01H
	BEQ	WAKE_UP_FROM_SLEEP_NEXT
	JSR_ISR_AII PORT_ISR	;Port wakeup occur

WAKE_UP_FROM_SLEEP_NEXT:
	LDA #(INT0_PORT+INT0_FXF15)
	STA !EVF0
	TSB !IEF0
	STZ !WAKEF
	CLI
;---------------------------SPEECH EQUATION -------------------------------------------------------------------------------
;	PLAY MANSPEAK_NSP<CH=1,VOL=128,SR=12000>
;		MANSPEAK_NSP is speech file name with NSP format
;		VOL=128 is volume level(0~128)
;		SR=12000 is sampling rate,
;		if user not assign value to SR then use the default S.R. in speech file
;---------------------------EVO EQUATION ---------------------------------------------------------------------------------
;	PLAY CLAP_1PIN<CH=EVO1,FORMAT=EVO>
;		CLAP_1PIN is file name with WIO format(speech with event or UIO command)
;		CH is evo channel assignment
;		if user not assign FORMAT then use the default EVO FORMAT(no audio data,only event and UIO command)
;-------------------------------------------------------------------------------------------------------------------------
MAIN_LOOP:
	LDA #WDTC_CLR
	STA !WDTC


;-----------------------------------------
; Cap Sensor Detection looping
; If check touched will jmp to key label
;-----------------------------------------
	.IF(WITH_FW_CAP_SENSOR_KEYS .GT. 0)
	CAP_SENSOR_ACTION    
	CAP_SENSOR_KEY_DETECTION
	.ENDIF
;-----------------------------------------

CHECK_SPEECH_BUSY:
	CHK_BUSY_CH1
	BEQ 3 
	JMP FXF15_FLOW

	LDA #SP_DOING
	BIT <NUSP_FLAG
	BNE 3
	JMP CHECK_SIL_DOING
	TRB <NUSP_FLAG

CHECK_PLAY_SIL_TODO:
	LDA #WDTC_CLR
	STA !WDTC

	LDA <SIL_COUNT
	BNE 3
	JMP SIL_PLAY_FINISH
	LDA #SIL_DOING
	TSB <NUSP_FLAG
PLAY_SILENCE:
;PLAY [10 msec]
	JSR HWE_READY_PROC
	PHP
	SEI

	LDA	#.LOW._@SIL_EQU
	STA HWE_CMD_BA+CMD_PARAMETER
	LDA	#.HIGH._@SIL_EQU
	STA HWE_CMD_BA+CMD_PARAMETER+1
	LDA	#.HIGH8._@SIL_EQU
	STA HWE_CMD_BA+CMD_PARAMETER+2
	.IF (WITH_SIM_SP .EQ. 1)
   	LDA	#.SEGHIGH._@SIL_EQU
	STA HWE_CMD_BA+CMD_PARAMETER+3
	.ELSE
	.ENDIF
	LDA #CMD_PLAY
	STA HWE_CMD_BA+CMD_IDX
	LDA #02H
	TSB !INTRF	
	PLP
	JSR CHK_HANDSHAKE_PROC
	JMP FXF15_FLOW

CHECK_SIL_DOING:
	LDA #SIL_DOING
	BIT <NUSP_FLAG
	BNE 3 
	JMP FXF15_FLOW

	DEC <SIL_COUNT
	BEQ 3
	JMP PLAY_SILENCE

	LDA #SIL_DOING
	TRB <NUSP_FLAG

SIL_PLAY_FINISH:
	LDY <TG_CUR
	CPY #FFH
	BEQ SIL_PLAY_FINISH_INDEX_INC		;POR
	LDX !TG_PLAYMODE_OFFSET_MAPPING,Y
	LDA _@TG_PLAY_MODE_TABLE,X
	BEQ SIL_PLAY_FINISH_INDEX_INC		;0:play all;1:play one sound

	LDA <REPEAT_COUNT_TG
	BEQ RELOAD_SPEECH_SENTENCE_LIST_REPEAT1
	DEC <REPEAT_COUNT_TG
	BNE RELOAD_SPEECH_SENTENCE_LIST_REPEAT1
	LDA <REPEAT_COUNT
	STA <REPEAT_COUNT_TG
	WAIT_HWENG_OFF
	CLOSE_PA
	JMP FXF15_FLOW

SIL_PLAY_FINISH_INDEX_INC:
	INC <EQU_INDEX
	LDA <EQU_INDEX
	CMP <LIST_EQU_COUNT
	BNE GET_SPEECH_SENTENCE_LIST

	LDA <REPEAT_COUNT_TG
	BEQ RELOAD_SPEECH_SENTENCE_LIST
	DEC <REPEAT_COUNT_TG
	BNE RELOAD_SPEECH_SENTENCE_LIST
	WAIT_HWENG_OFF
	CLOSE_PA
	JMP FXF15_FLOW

RELOAD_SPEECH_SENTENCE_LIST:
	STZ <EQU_INDEX
	STZ <SIL_COUNT
RELOAD_SPEECH_SENTENCE_LIST_REPEAT1:
	LDA <LIST_ADDR_REPEAT
	STA <EQU_ADDR
	LDA <LIST_ADDR_REPEAT+1
	STA <EQU_ADDR+1
	LDA <LIST_ADDR_REPEAT+2
	STA <EQU_ADDR+2

GET_SPEECH_SENTENCE_LIST:
	JSR NSP_PLAY_PROCESS
	JMP FXF15_FLOW
;-----------------------------------------------------
;-----------------------------------------------------	
FXF15_FLOW:
	LDA #WDTC_CLR
	STA !WDTC

	LDA #FXF15_FLAG
	BIT <NUSP_FLAG
	BNE 3
	JMP CHECK_ENTER_SLEEP_MODE	
	TRB <NUSP_FLAG

	LDA <NUSP_FLAG
	BIT #DIR0_FLAG
	BEQ _xFXF15_CHECK2
	LDX #00H
	JMP _xBPIN_DBC
_xFXF15_CHECK2:
.IF(PACKAGE_FORM = 'SOP14')
	BIT #DIR1_FLAG
	BEQ _xFXF15_CHECK3
	LDX #01H
	JMP _xBPIN_DBC

_xFXF15_CHECK3:
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	BIT #DIR2_FLAG
	BEQ _xFXF15_CHECK4
	LDX #02H
	JMP _xBPIN_DBC
.ENDIF
.ENDIF

_xFXF15_CHECK4:
	BIT #PORT_FLAG
	BNE _xPRE_DEBOUNCE
	BRA _xNO_TGIN

_xPRE_DEBOUNCE:
	LDA <COUNT_ON
	BEQ _xDIRECT_TG	
	DEC <COUNT_ON
	BEQ _xDIRECT_TG
	JMP MAIN_LOOP

_xDIRECT_TG:
	LDA !BP0R                ; MASK OTHER BITS
	EOR <TG_CLM0            ; CHECK STATE CHANGE
	AND #TGP0_DEF
	BEQ _xCHECK_BP1TG
	JMP _xDIRECT_IN_0

_xCHECK_BP1TG:
.IF(PACKAGE_FORM = 'SOP14')
	LDA !BP1R                ; MASK OTHER BITS
	EOR <TG_CLM1            ; CHECK STATE CHANGE
	AND #TGP1_DEF
	BEQ _xCHECK_BP2TG
	JMP _xDIRECT_IN_1

_xCHECK_BP2TG:
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	LDA !BP2R                ; MASK OTHER BITS
	EOR <TG_CLM2            ; CHECK STATE CHANGE
	AND #TGP2_DEF
	BEQ _xNO_TGIN
	JMP _xDIRECT_IN_2
.ENDIF
.ENDIF

_xNO_TGIN:
_xCLR_FLAG:
_xTG_NOT_ENABLE:
	LDA !BP0R
	AND #TGP0_DEF
	STA <TG_CLM0
.IF(PACKAGE_FORM = 'SOP14')
	LDA !BP1R
	AND #TGP1_DEF
	STA <TG_CLM1

.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	LDA !BP2R
	AND #TGP2_DEF
	STA <TG_CLM2
.ENDIF
.ENDIF

	LDA #(PORT_FLAG+DIRX_FLAG)
	TRB <NUSP_FLAG
	STZ <COUNT_ON
	LDA #INT0_PORT
	STA !EVF0
	TSB !IEF0
	JMP CHECK_ENTER_SLEEP_MODE

_xBPIN_DBC:
	LDY <WHICH_TG
	LDA !BP0R,X
	EOR TG_CLM0,X
	AND TG_TABLE,Y
	BNE 3 

_xTG_NOISE:
	JMP _xCLR_FLAG

	LDA #INT0_PORT					; removed from _xFXF15_RTI block
	STA !EVF0					;
	DEC <COUNT_ON
	BEQ _xDEBC_TGEND
	JMP MAIN_LOOP

_xDEBC_TGEND:
_xDEBC_TGOK:
	LDY <WHICH_TG
	LDA TG_TABLE,Y
	EOR <TG_CLM0,X
	STA <TG_CLM0,X
	LDA !BP0R,X
_xDEBC_TGOK_NEXT:
	AND TG_TABLE,Y
	BEQ 3
_xTG_RISING:
	JMP _xTG_NOT_ENABLE

	LDA <TGF_EN0,X
	AND TG_TABLE,Y
	BNE _xTO_JMP_LOC
	JMP _xTG_NOT_ENABLE

_xTO_JMP_LOC:
	LDA !BP0R
	AND #TGP0_DEF
	STA <TG_CLM0
.IF(PACKAGE_FORM = 'SOP14')
	LDA !BP1R
	AND #TGP1_DEF
	STA <TG_CLM1
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	LDA !BP2R
	AND #TGP2_DEF
	STA <TG_CLM2
.ENDIF
.ENDIF
	LDA #(PORT_FLAG+DIRX_FLAG)
	TRB <NUSP_FLAG
	STZ <COUNT_ON
	LDA #INT0_PORT
	STA !EVF0
	TSB !IEF0

	LDY <WHICH_TG
	LDX !TG_INDEXTABLE_OFFSET_MAPPING,Y
	JSR GET_LIST_PROCESS
	BNE 3
	JMP MAIN_LOOP

	LDA #(SIL_DOING+SP_DOING)
	TRB <NUSP_FLAG
	LDA <TG_CUR
	STA <TG_PREV
	LDY <WHICH_TG
	STY <TG_CUR		
	CPY <TG_PREV
	BNE CUR_NOT_PREV

	LDX !TG_PLAYMODE_OFFSET_MAPPING,Y
	LDA _@TG_PLAY_MODE_TABLE,X
	BEQ TG_EQU_RESET		;0:play all;1:play one sound

	INC <EQU_INDEX
	LDA <EQU_INDEX
	CMP <LIST_EQU_COUNT
	BCS TG_EQU_RESET                        ;<
	LDA <EQU_ADDR
	STA <LIST_ADDR_REPEAT
	LDA <EQU_ADDR+1
	STA <LIST_ADDR_REPEAT+1
	LDA <EQU_ADDR+2
	STA <LIST_ADDR_REPEAT+2
	JMP GET_SPEECH_SENTENCE_LIST

TG_EQU_RESET:
CUR_NOT_PREV:
	JSR SET_LIST_PROCESS
	JMP GET_SPEECH_SENTENCE_LIST

;~~~~~~~ DIRECT BP0 INPUT ~~~~~~~~~~~~~~~~~~~~
_xDIRECT_IN_0:
	TAX
	LDY #00

_xNEXT_TGIN0:
	TXA
	AND TG_TABLE,Y          ; TG DEFINE TABLE
	BNE _xEND_DIR0
_xNEXT_TGIN0_NEXT:
	INY
	CPY #TGP0_NUM
	BCC _xNEXT_TGIN0
	JMP _xCHECK_BP1TG

_xEND_DIR0:
	STY <WHICH_TG           ; RECORDS WHICH TG INTERRUPT

	LDA !BP0R
	AND TG_TABLE,Y
	BNE _xBP0R_DISABLE

	LDA <TGF_EN0
	AND TG_TABLE,Y           ; ENABLE/DISABLE TGF CHECK
	BEQ _xBP0_DISABLE

	LDA #DIR0_FLAG          ; SET DIRECT 0 FLAG
	TSB <NUSP_FLAG
	LDX #00H
	JMP _xTO_JMP_TGF_LOC

_xBP0R_DISABLE:
_xBP0_DISABLE:
	LDA <TG_CLM0					; FOR THE PHA AFTER "_xSET_TG_FLAG"
	EOR TG_TABLE,Y 
	STA <TG_CLM0					; FOR THE PHA AFTER "_xSET_TG_FLAG"
	JMP _xNEXT_TGIN0_NEXT

;~~~~~~~ DIRECT BP1 INPUT ~~~~~~~~~~~~~~~~~~~~
_xDIRECT_IN_1:
.IF(PACKAGE_FORM = 'SOP14')
	TAX
	LDY #TGP0_NUM

_xNEXT_TGIN1:
	TXA
	AND TG_TABLE,Y          ; TG DEFINE TABLE
	BNE _xEND_DIR1
_xNEXT_TGIN1_NEXT:
	INY
	CPY #TGP0_NUM+TGP1_NUM
	BCC _xNEXT_TGIN1
	JMP _xNO_TGIN

_xEND_DIR1:
	STY <WHICH_TG           ; RECORDS WHICH TG INTERRUPT

	LDA !BP1R
	AND TG_TABLE,Y
	BNE _xBP1R_DISABLE

	LDA <TGF_EN1
	AND TG_TABLE,Y           ; ENABLE/DISABLE TGF CHECK
	BEQ _xBP1_DISABLE

	LDA #DIR1_FLAG          ; SET DIRECT 0 FLAG
	TSB <NUSP_FLAG
	LDX #01H
	JMP _xTO_JMP_TGF_LOC

_xBP1R_DISABLE:
_xBP1_DISABLE:
	LDA <TG_CLM1					; FOR THE PHA AFTER "_xSET_TG_FLAG"
	EOR TG_TABLE,Y 
	STA <TG_CLM1					; FOR THE PHA AFTER "_xSET_TG_FLAG"
	JMP _xNEXT_TGIN1_NEXT

;~~~~~~~ DIRECT BP2 INPUT ~~~~~~~~~~~~~~~~~~~~
_xDIRECT_IN_2:
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	TAX
	LDY #TGP0_NUM+TGP1_NUM

_xNEXT_TGIN2:
	TXA
	AND TG_TABLE,Y          ; TG DEFINE TABLE
	BNE _xEND_DIR2
_xNEXT_TGIN2_NEXT:
	INY
	CPY #TGP0_NUM+TGP1_NUM+TGP2_NUM
	BCC _xNEXT_TGIN2
	JMP _xNO_TGIN

_xEND_DIR2:
	STY <WHICH_TG           ; RECORDS WHICH TG INTERRUPT

	LDA !BP2R
	AND TG_TABLE,Y
	BNE _xBP2R_DISABLE

	LDA <TGF_EN2
	AND TG_TABLE,Y           ; ENABLE/DISABLE TGF CHECK
	BEQ _xBP2_DISABLE

	LDA #DIR2_FLAG          ; SET DIRECT 0 FLAG
	TSB <NUSP_FLAG
	LDX #02H
	JMP _xTO_JMP_TGF_LOC

_xBP2R_DISABLE:
_xBP2_DISABLE:
	LDA <TG_CLM2					; FOR THE PHA AFTER "_xSET_TG_FLAG"
	EOR TG_TABLE,Y 
	STA <TG_CLM2					; FOR THE PHA AFTER "_xSET_TG_FLAG"
	JMP _xNEXT_TGIN2_NEXT
.ENDIF
.ENDIF

_xTO_JMP_TGF_LOC:
	LDA #INT0_PORT
	STA !EVF0
	LDA #PORT_FLAG
	TRB <NUSP_FLAG
	LDA #WDTC_CLR
	STA !WDTC
	LDA #(T_DBCTG-PRE_DEBOUNCE)
	STA <COUNT_ON 
	BEQ 3
	JMP MAIN_LOOP
	JMP _xDEBC_TGOK
;-----------------------------------------------------
;-----------------------------------------------------	
GET_LIST_PROCESS:
	LDA !_@INDEXTABLE,X
	STA <LIST_ADDR_TG
	INX
	LDA !_@INDEXTABLE,X
	STA <LIST_ADDR_TG+1
	INX
	LDA !_@INDEXTABLE,X
	STA <LIST_ADDR_TG+2

	LDA_DP_ILI LIST_ADDR_TG
	BEQ GET_LIST_PROCESS_NONE
	STA <LIST_EQU_COUNT
	INC_ADDR_DP LIST_ADDR_TG
	LDA_DP_ILI LIST_ADDR_TG
	STA <REPEAT_COUNT_TG
	STA <REPEAT_COUNT
	INC_ADDR_DP LIST_ADDR_TG
	LDA #01H
GET_LIST_PROCESS_NONE:
	RTS
;-----------------------------------------------------
SET_LIST_PROCESS:
	STZ <EQU_INDEX
	STZ <SIL_COUNT	
	LDA <LIST_ADDR_TG
	STA <LIST_ADDR_REPEAT
	STA <EQU_ADDR
	LDA <LIST_ADDR_TG+1
	STA <LIST_ADDR_REPEAT+1
	STA <EQU_ADDR+1
	LDA <LIST_ADDR_TG+2
	STA <LIST_ADDR_REPEAT+2
	STA <EQU_ADDR+2
	OPEN_PA
	RTS

;-----------------------------------------------------	
NSP_PLAY_PROCESS:
	LDA #WDTC_CLR
	STA !WDTC	
	JSR HWE_READY_PROC
	PHP
	SEI

	LDA_DP_ILI EQU_ADDR
	STA HWE_CMD_BA+CMD_PARAMETER
	INC_ADDR_DP EQU_ADDR
	LDA_DP_ILI EQU_ADDR
	STA HWE_CMD_BA+CMD_PARAMETER+1
	INC_ADDR_DP EQU_ADDR
	LDA_DP_ILI EQU_ADDR	
	STA HWE_CMD_BA+CMD_PARAMETER+2
	INC_ADDR_DP EQU_ADDR
	.IF (WITH_SIM_SP .EQ. 1)
   	LDA_DP_ILI EQU_ADDR
	STA HWE_CMD_BA+CMD_PARAMETER+3
	.ELSE
	.ENDIF
	LDA #CMD_PLAY
	STA HWE_CMD_BA+CMD_IDX
	LDA #02H
	TSB !INTRF

	INC_ADDR_DP EQU_ADDR
	LDA_DP_ILI EQU_ADDR
	STA <SIL_COUNT
	INC_ADDR_DP EQU_ADDR

	LDA #SP_DOING
	TSB <NUSP_FLAG
	PLP
	JSR CHK_HANDSHAKE_PROC
	RTS
;-----------------------------------------------------
;-----------------------------------------------------
CHECK_ENTER_SLEEP_MODE:
	LDA #WDTC_CLR
	STA !WDTC
	LDA <NUSP_FLAG
	BIT #(PORT_FLAG+DIRX_FLAG+SIL_DOING+SP_DOING)
	BEQ 3 
	JMP MAIN_LOOP

ENTER_SLEEP_MODE:
	LDA #WDTC_CLR
	STA !WDTC
	CHK_BUSY_CH1
	BNE ENTER_SLEEP_MODE
	WAIT_HWENG_OFF

	SEI
	CLOSE_PA
	LDA !BP0R
	AND #TGP0_DEF
	STA <TG_CLM0
.IF(PACKAGE_FORM = 'SOP14')
	LDA !BP1R
	AND #TGP1_DEF
	STA <TG_CLM1
.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	LDA !BP2R
	AND #TGP2_DEF
	STA <TG_CLM2
.ENDIF
.ENDIF
	STZ <NUSP_FLAG
	LDA #FFH
	STA !EVF0
	LDA #INT0_PORT
	STA !IEF0			; ONLY ENABLE PORT INT AND RTC (IF IT OPEN)

	JSR SAVE_LIB_DPD_RAM
.IF (PARTNO='N589D080').OR.(PARTNO='N589D170').OR.(PARTNO='N589D340')
.IFDEF EXT_PA
	LDA #87H
.ELSE
	LDA #C7H
.ENDIF
	TSB !BP0M
	TSB !BP0D
	LDA #08H
	TSB !BP1M
	TSB !BP1D
.ENDIF

.IF (PARTNO='N589D081').OR.(PARTNO='N589D171').OR.(PARTNO='N589D341').OR.(PARTNO='N589D481')
	LDA #07H
	TSB !BP0M
	TSB !BP0D
.IFDEF EXT_PA
	LDA #A0H
.ELSE
	LDA #E0H
.ENDIF
	TSB !BP1M
	TSB !BP1D
.ENDIF

.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	LDA #03H
	TSB !BP0M
	TSB !BP0D
.IFDEF EXT_PA
	LDA #0CH
.ELSE
	LDA #8CH
.ENDIF
	TSB !BP1M
	TSB !BP1D
	LDA #01H
	TSB !BP2M
	TSB !BP2D
.ENDIF

	STZ !WAKEF		; add by chris	
	SYNTHESISER_OFF
	CLI
	STOP

	NOP
	NOP
;-----------------------------------------------------
;-----------------------------------------------------	
SAVE_LIB_DPD_RAM:
	LDX #FFH
SAVE_LIB_DPD_RAM_LOOP:
	INX
	LDA <NUSP_FLAG,X
	STA NUSP_FLAG_BAK,X
	CPX #(DPD_RAM_SIZE-1)
	BNE SAVE_LIB_DPD_RAM_LOOP
	RTS
;-----------------------------------------------------	
RESTORE_LIB_DPD_RAM:
	LDX #FFH
RESTORE_LIB_DPD_RAM_LOOP:
	INX
	LDA NUSP_FLAG_BAK,X
	STA <NUSP_FLAG,X
	CPX #(DPD_RAM_SIZE-1)
	BNE RESTORE_LIB_DPD_RAM_LOOP
	RTS
;===========================================================
;N589D080,N589D170,N589D340:BP00/01/02/06(PA)/07,BP13
;N589D081,N589D171,N589D341,N589D481:BP00/01/02,BP15/16(PA)/17
;N589B480N,N589D650N,N589D960N:BP00/01,BP12/13/17(PA),BP20
;----------------------------------------------------
TG_TABLE:
	DB BIT0		; TG1, BP0.0  
    	DB BIT1		; TG2, BP0.1
.IF(PACKAGE_FORM = 'SOP14')
.IF (PARTNO='N589D080').OR.(PARTNO='N589D170').OR.(PARTNO='N589D340')
    	DB BIT2		; BP0.2
.IFNDEF EXT_PA
    	DB BIT6		; BP0.6
.ENDIF
    	DB BIT7		; BP0.7
    	DB BIT3		; BP1.3
.ENDIF

.IF (PARTNO='N589D081').OR.(PARTNO='N589D171').OR.(PARTNO='N589D341').OR.(PARTNO='N589D481')
    	DB BIT2		; BP0.2
    	DB BIT5		; BP1.5
.IFNDEF EXT_PA
    	DB BIT6		; BP1.6
.ENDIF
    	DB BIT7		; BP1.7
.ENDIF

.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	DB BIT2		; BP1.2
    	DB BIT3		; BP1.3
.IFNDEF EXT_PA
    	DB BIT7		; BP1.7
.ENDIF
    	DB BIT0		; BP2.0
.ENDIF
.ENDIF

;----------------------------------------------------
;----------------------------------------------------
TG_INDEXTABLE_OFFSET_MAPPING:
	DB 7
	DB 10
.IF(PACKAGE_FORM = 'SOP14')
.IF (PARTNO='N589D080').OR.(PARTNO='N589D170').OR.(PARTNO='N589D340')
	DB 13		; BP0.2
.IFNDEF EXT_PA
    	DB 22		; BP0.6
.ENDIF
    	DB 16		; BP1.7
    	DB 19		; BP1.3
.ENDIF

.IF (PARTNO='N589D081').OR.(PARTNO='N589D171').OR.(PARTNO='N589D341').OR.(PARTNO='N589D481')
    	DB 13		; BP0.2
    	DB 16		; BP1.5
.IFNDEF EXT_PA
    	DB 22		; BP1.6
.ENDIF
    	DB 19		; BP1.7
.ENDIF

.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	DB 13		; BP1.2
    	DB 16		; BP1.3
.IFNDEF EXT_PA
    	DB 22		; BP1.7
.ENDIF
    	DB 19		; BP2.0
.ENDIF
.ENDIF
;----------------------------------------------------
;----------------------------------------------------
TG_PLAYMODE_OFFSET_MAPPING:
	DB 1
	DB 2
.IF(PACKAGE_FORM = 'SOP14')
.IF (PARTNO='N589D080').OR.(PARTNO='N589D170').OR.(PARTNO='N589D340')
	DB 3		; BP0.2
.IFNDEF EXT_PA
    	DB 6		; BP0.6
.ENDIF
    	DB 4		; BP1.7
    	DB 5		; BP1.3
.ENDIF

.IF (PARTNO='N589D081').OR.(PARTNO='N589D171').OR.(PARTNO='N589D341').OR.(PARTNO='N589D481')
    	DB 3		; BP0.2
    	DB 4		; BP1.5
.IFNDEF EXT_PA
    	DB 6		; BP1.6
.ENDIF
    	DB 5		; BP1.7
.ENDIF

.IF (PARTNO='N589B480N').OR.(PARTNO='N589D650N').OR.(PARTNO='N589D960N')
	DB 3		; BP1.2
    	DB 4		; BP1.3
.IFNDEF EXT_PA
    	DB 6		; BP1.7
.ENDIF
    	DB 5		; BP2.0
.ENDIF
.ENDIF
	ENDS
;==========================================================================
;	ASSIGN INTERRUPT VECTORS INSIDE THIS SECTION
;==========================================================================
	VECTOR: SECTION

	ORG 1080H
	DW 	FXF15_ISR		;FXF15 ISR
	DW 	FXF13_ISR		;FXF13 ISR
	DW 	FXF10_ISR		;FXF10 ISR

	ORG	1086H
	DW	LRCT_ISR		;LRCT ISR
	DW	RESERVE2_ISR
	DW	ADC_ISR			;ADC ISR
	DW	RESERVE1_ISR	

	ORG	108EH
	DW	1000H			;IV OF BRK
	DW	TMA_ISR			;TIMER A ISR
	DW 	TMG_ISR			;TIMER G ISR

	ORG	1098H
	DW	PORT_ISR		;PORT ISR

	ORG 109CH
	DW	MAIN_START		;IV OF RESET

	ENDS


;**The following is audio external**
;**The following is sentence label**
;**The following is INIT_DECODE_SPEECH label**
	EXT_PROGRAM: SECTION
	ENDS
